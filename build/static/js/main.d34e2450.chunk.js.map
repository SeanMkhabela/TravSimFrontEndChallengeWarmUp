{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["item","id","v4","name","item2","App","useState","text","setText","todo","title","items","done","delete","this","setState","prevState","data","filter","el","state","className","type","value","onChange","e","target","onClick","prev","onDragEnd","destination","source","index","droppableId","itemCopy","splice","_","map","key","provided","snapshot","ref","innerRef","droppableProps","draggableId","console","log","isDragging","draggableProps","dragHandleProps","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAQMA,EAAO,CACXC,GAAIC,cACJC,KAAM,mCAGFC,EAAQ,CACZH,GAAIC,cACJC,KAAM,8BAyIOE,MAtIf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,CACjCG,KAAM,CACJC,MAAO,OACPC,MAAO,CAACX,EAAMI,IAEhBQ,KAAM,CACJF,MAAO,YACPC,MAAO,IAETE,OAAQ,CACNH,MAAO,UACPC,MAAO,GACPE,OAHM,SAGCF,GACLG,KAAKC,UAAS,SAACC,GAAD,MAAgB,CAC5BC,KAAMD,EAAUC,KAAKC,QAAO,SAACC,GAAD,OAAQA,GAAMR,aAdlD,mBAAOS,EAAP,KAAcL,EAAd,KAuEA,OACE,sBAAKM,UAAU,MAAf,UACE,gCACE,uBACEC,KAAK,OACLC,MAAOhB,EACPiB,SAAU,SAACC,GAAD,OAAOjB,EAAQiB,EAAEC,OAAOH,UAEpC,wBAAQI,QA5BE,WACdZ,GAAS,SAACa,GACR,OAAO,2BACFA,GADL,IAEEnB,KAAM,CACJC,MAAO,OACPC,MAAM,CACJ,CACEV,GAAIC,cACJC,KAAMI,IAHL,mBAKAqB,EAAKnB,KAAKE,cAMrBH,EAAQ,KAWJ,oBAEF,cAAC,IAAD,CAAiBqB,UA7DC,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,OACpC,GAAKD,IAKHA,EAAYE,QAAUD,EAAOC,OAC7BF,EAAYG,cAAgBF,EAAOE,aAFrC,CAQA,IAAMC,EAAQ,eAAQd,EAAMW,EAAOE,aAAatB,MAAMoB,EAAOC,QAE7DjB,GAAS,SAACa,GAYR,OAXAA,EAAI,eAAQA,IAEPG,EAAOE,aAAatB,MAAMwB,OAAOJ,EAAOC,MAAO,GAGpDJ,EAAKE,EAAYG,aAAatB,MAAMwB,OAClCL,EAAYE,MACZ,EACAE,GAGKN,OAkCP,SACGQ,IAAEC,IAAIjB,GAAO,SAACH,EAAMqB,GACnB,OACE,sBAAejB,UAAW,SAA1B,UACE,6BAAKJ,EAAKP,QACV,cAAC,IAAD,CAAWuB,YAAaK,EAAxB,SACG,SAACC,EAAUC,GACV,OACE,8CACEC,IAAKF,EAASG,UACVH,EAASI,gBAFf,IAGEtB,UAAW,gBAHb,UAKGJ,EAAKN,MAAM0B,KAAI,SAAClB,EAAIa,GACnB,OACE,cAAC,IAAD,CAEEA,MAAOA,EACPY,YAAazB,EAAGlB,GAHlB,SAKG,SAACsC,EAAUC,GAEV,OADAK,QAAQC,IAAIN,GAEV,yDACEnB,UAAS,eACPmB,EAASO,YAAc,YAEzBN,IAAKF,EAASG,UACVH,EAASS,gBACTT,EAASU,iBANf,aAQG9B,EAAGhB,UAfLgB,EAAGlB,OAsBbsC,EAASW,qBAnCVZ,YC5FPa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d34e2450.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport _ from \"lodash\";\nimport { v4 } from \"uuid\";\n\n// This Was Coded By Sean-Bailey Mkhabela\n\nconst item = {\n  id: v4(),\n  name: \"Finish Writing Code For TravSim\",\n};\n\nconst item2 = {\n  id: v4(),\n  name: \"This App Was Coded By Sean\",\n};\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [state, setState] = useState({\n    todo: {\n      title: \"Todo\",\n      items: [item, item2],\n    },\n    done: {\n      title: \"Completed\",\n      items: [],\n    },\n    delete: {\n      title: \"Deleted\",\n      items: [],\n      delete(items) {\n        this.setState((prevState) => ({\n          data: prevState.data.filter((el) => el != items),\n        }));\n      },\n    },\n  });\n\n  const handleDragEnd = ({ destination, source }) => {\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.index === source.index &&\n      destination.droppableId === source.droppableId\n    ) {\n      return;\n    }\n\n    // Creating a copy of item before removing it from state\n    const itemCopy = { ...state[source.droppableId].items[source.index] };\n\n    setState((prev) => {\n      prev = { ...prev };\n      // Remove from previous items array\n      prev[source.droppableId].items.splice(source.index, 1);\n\n      // Adding to new items array location\n      prev[destination.droppableId].items.splice(\n        destination.index,\n        0,\n        itemCopy\n      );\n\n      return prev;\n    });\n  };\n\n  const addItem = () => {\n    setState((prev) => {\n      return {\n        ...prev,\n        todo: {\n          title: \"Todo\",\n          items: [\n            {\n              id: v4(),\n              name: text,\n            },\n            ...prev.todo.items,\n          ],\n        },\n      };\n    });\n\n    setText(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <div>\n        <input\n          type=\"text\"\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n        />\n        <button onClick={addItem}>Add</button>\n      </div>\n      <DragDropContext onDragEnd={handleDragEnd}>\n        {_.map(state, (data, key) => {\n          return (\n            <div key={key} className={\"column\"}>\n              <h3>{data.title}</h3>\n              <Droppable droppableId={key}>\n                {(provided, snapshot) => {\n                  return (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.droppableProps}\n                      className={\"droppable-col\"}\n                    >\n                      {data.items.map((el, index) => {\n                        return (\n                          <Draggable\n                            key={el.id}\n                            index={index}\n                            draggableId={el.id}\n                          >\n                            {(provided, snapshot) => {\n                              console.log(snapshot);\n                              return (\n                                <div\n                                  className={`item ${\n                                    snapshot.isDragging && \"dragging\"\n                                  }`}\n                                  ref={provided.innerRef}\n                                  {...provided.draggableProps}\n                                  {...provided.dragHandleProps}\n                                >\n                                  {el.name}\n                                </div>\n                              );\n                            }}\n                          </Draggable>\n                        );\n                      })}\n                      {provided.placeholder}\n                    </div>\n                  );\n                }}\n              </Droppable>\n            </div>\n          );\n        })}\n      </DragDropContext>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}